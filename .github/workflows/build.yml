name: Build

on:
  push:
    tags: [ "v*" ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        compiler: [gcc, clang, msvc]
        build_type: [Release, Debug]
        sanitizer: [no-sanitizer, with-sanitizer]
        os: [ubuntu-latest, windows-latest]
        exclude:
          - os: windows-latest
            compiler: clang
          - os: windows-latest
            compiler: gcc
          - os: windows-latest
            sanitizer: with-sanitizer
          - os: ubuntu-latest
            compiler: msvc
          - build_type: Release
            sanitizer: with-sanitizer
        include:
          - compiler: gcc
            gcc: true
          - compiler: clang
            clang: true
          - compiler: msvc
            msvc: true
          - sanitizer: with-sanitizer
            use-sanitizer: true
            cov_sanitize: ON
          - sanitizer: no-sanitizer
            cov_sanitize: OFF

            # Ubuntu ANY
          - os: ubuntu-latest
            ubuntu: true
            home: /home/runner
            run_os: ubuntu
            latest_conan_hash: e903f3ceb636ec2e496810737eb6033a1a8c39c227b437a0693d31086d8aa9df
            # Windows ANY
          - os: windows-latest
            windows: true
            home: C:/Users/runneradmin
            run_os: windows
            latest_conan_hash: 1f8eec6aa067e5a60fc4f0ab2668dae66a983ae5902b1eda006f134b009f84eb

    env:
      BUILD_TYPE: ${{ matrix.build_type }}
      CONAN_REVISIONS_ENABLED: 1
      FLOW_COMMAND: python tools/flow/run.py --github --cutdown-os -c os=${{ matrix.run_os }} build_type=${{ matrix.build_type }} compiler=${{ matrix.compiler }} sanitizer=${{ matrix.cov_sanitize }}

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
         submodules: true

    - name: Conanfile hash
      run: |
        echo ${{ hashFiles('conanfile.txt') }}
        echo ${{ matrix.latest_conan_hash }}

#     ######## ##    ## ##     ## #### ########   #######  ##    ## ##     ## ######## ##    ## ########
#     ##       ###   ## ##     ##  ##  ##     ## ##     ## ###   ## ###   ### ##       ###   ##    ##
#     ##       ####  ## ##     ##  ##  ##     ## ##     ## ####  ## #### #### ##       ####  ##    ##
#     ######   ## ## ## ##     ##  ##  ########  ##     ## ## ## ## ## ### ## ######   ## ## ##    ##
#     ##       ##  ####  ##   ##   ##  ##   ##   ##     ## ##  #### ##     ## ##       ##  ####    ##
#     ##       ##   ###   ## ##    ##  ##    ##  ##     ## ##   ### ##     ## ##       ##   ###    ##
#     ######## ##    ##    ###    #### ##     ##  #######  ##    ## ##     ## ######## ##    ##    ##

    - name: Install GCC 12 & Ninja
      if: ${{ matrix.ubuntu }}
      run: |
        sudo apt-get remove g++-11 -y
        sudo apt-get install ninja-build -y

    - name: Set up GCC
      if: ${{ matrix.ubuntu && matrix.gcc }}
      run: |
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 90
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 90
        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++-12 90
        sudo update-alternatives --install /usr/bin/cc cc /usr/bin/gcc-12 90
        sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-12 90

    - name: Set up Clang
      if: ${{ matrix.clang }}
      uses: egor-tensin/setup-clang@v1
      with:
        version: 15

    - name: Check C++ binary
      if: ${{ matrix.ubuntu }}
      run: |
        realpath `which c++`
        c++ --version
        sudo rm -rf `which g++-11`
        sudo rm -rf `which gcc-11`
        sudo rm -rf `which clang++-14`
        sudo rm -rf `which clang-14`

    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main
      with:
        version: 1.57.0

    - name: Configure Conan (deprecated)
      run: |
        conan remote add mbits-conan https://mbits.jfrog.io/artifactory/api/conan/mbits-conan
        conan user -p ${{ secrets.JFROG_KEY }} -r mbits-conan ${{ secrets.JFROG_USER }}

    - name: Conan cache
      uses: actions/cache@v3
      id: cache
      with:
        path: ${{ matrix.home }}/.conan/data
        key: ${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ hashFiles('conanfile.txt') }}
        restore-keys: |
          ${{ matrix.os }}-${{ matrix.build_type }}
          ${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.latest_conan_hash }}
          ${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ matrix.latest_conan_hash }}

    - name: Install OpenCppCoverage
      uses: KungFuDonkey/Install-OpenCppCoverage@v1
      if: ${{ matrix.windows && matrix.build_type == 'Debug' }}

#     ########  ########   #######        ## ########  ######  ########
#     ##     ## ##     ## ##     ##       ## ##       ##    ##    ##
#     ##     ## ##     ## ##     ##       ## ##       ##          ##
#     ########  ########  ##     ##       ## ######   ##          ##
#     ##        ##   ##   ##     ## ##    ## ##       ##          ##
#     ##        ##    ##  ##     ## ##    ## ##       ##    ##    ##
#     ##        ##     ##  #######   ######  ########  ######     ##

    - name: Configure
      run: ${{ env.FLOW_COMMAND }} -s Conan,CMake

    - name: Build
      run: ${{ env.FLOW_COMMAND }} -s Build

    - name: Test
      run: ${{ env.FLOW_COMMAND }} -s Test

    - name: Pack
      id: artifacts
      if: ${{ github.event_name == 'push' && github.ref_type == 'tag' && startsWith(github.ref_name, 'v') }}
      run: ${{ env.FLOW_COMMAND }} -s Pack,Artifacts

#     ##     ## ########  ##        #######     ###    ########
#     ##     ## ##     ## ##       ##     ##   ## ##   ##     ##
#     ##     ## ##     ## ##       ##     ##  ##   ##  ##     ##
#     ##     ## ########  ##       ##     ## ##     ## ##     ##
#     ##     ## ##        ##       ##     ## ######### ##     ##
#     ##     ## ##        ##       ##     ## ##     ## ##     ##
#      #######  ##        ########  #######  ##     ## ########

    - name: Upload packages
      uses: actions/upload-artifact@v3
      if: ${{ steps.artifacts.outputs.CPACK_GENERATORS != '' }}
      with:
        name: Packages
        path: ${{github.workspace}}/build/artifacts/packages/

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: Test results
        path: ${{github.workspace}}/build/artifacts/test-results/

  publish:
    name: Upload packages
    if: ${{ github.event_name == 'push' && github.ref_type == 'tag' && startsWith(github.ref_name, 'v') }}
    needs: build
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Get packages
      uses: actions/download-artifact@v3
      with:
        name: Packages
        path: ${{github.workspace}}/build/download/packages
    
    - name: Upload to release
      run: python tools/release.py --upload ${{github.workspace}}/build/download/packages
