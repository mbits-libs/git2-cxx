name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        compiler: [gcc, clang, msvc]
        build_type: [Release, Debug]
        sanitizer: [no-sanitizer, with-sanitizer]
        os: [ubuntu-latest, windows-latest]
        exclude:
          - os: windows-latest
            compiler: clang
          - os: windows-latest
            compiler: gcc
          - os: windows-latest
            sanitizer: with-sanitizer
          - os: ubuntu-latest
            compiler: msvc
          - build_type: Release
            sanitizer: with-sanitizer
        include:
          - compiler: gcc
            gcc: true
          - compiler: clang
            clang: true
          - compiler: msvc
            msvc: true
          - sanitizer: with-sanitizer
            use-sanitizer: true
            cov_sanitize: ON
          - sanitizer: no-sanitizer
            cov_sanitize: OFF

            # Ubuntu ANY
          - os: ubuntu-latest
            ubuntu: true
            home: /home/runner
            latest_conan_hash: 111b1001009e07646d901bc7f4c1f6288c65deb6757bc615c38b2dfc8174207f
            conan_profile: settings.compiler.libcxx=libstdc++11
            build_generator: ninja
            # Windows ANY
          - os: windows-latest
            windows: true
            home: C:/Users/runneradmin
            latest_conan_hash: 701d0a420b7f8c0168f6d14ed46ca0520792087cccf5d2254afd92583d58c1f8
            build_generator: msbuild
            # ANY Release
          - build_type: Release
            build_profile: release
            # ANY Debug
          - build_type: Debug
            build_profile: debug
            # Ubuntu Release
          - os: ubuntu-latest
            build_type: Release
            sanitizer: no-sanitizer
            cpack_generator: TGZ
            # Ubuntu Debug
          - os: ubuntu-latest
            build_type: Debug
            coverage: true
            # Windows Release
          - os: windows-latest
            build_type: Release
            cpack_generator: ZIP
            conan_profile: settings.compiler.runtime=MD
            # Windows Debug
          - os: windows-latest
            build_type: Debug
            conan_profile: settings.compiler.runtime=MDd

    env:
      BUILD_TYPE: ${{ matrix.build_type }}
      CONAN_REVISIONS_ENABLED: 1

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
         submodules: true

    - name: Conanfile hash
      run: |
        echo ${{ hashFiles('conanfile.txt') }}
        echo ${{ matrix.latest_conan_hash }}

    - name: Install GCC 12 & Ninja
      if: ${{ matrix.ubuntu }}
      run: |
        sudo apt-get remove g++-11 -y
        sudo apt-get install ninja-build -y

    - name: Set up GCC
      if: ${{ matrix.ubuntu && matrix.gcc }}
      run: |
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 90
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 90
        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++-12 90
        sudo update-alternatives --install /usr/bin/cc cc /usr/bin/gcc-12 90
        sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-12 90

    - name: Set up Clang
      if: ${{ matrix.clang }}
      uses: egor-tensin/setup-clang@v1
      with:
        version: 15

    - name: Check C++ binary
      if: ${{ matrix.ubuntu }}
      run: |
        realpath `which c++`
        c++ --version
        sudo rm -rf `which g++-11`
        sudo rm -rf `which gcc-11`
        sudo rm -rf `which clang++-14`
        sudo rm -rf `which clang-14`

    - name: Conan output
      run: |
        import os
        dirname = os.path.join('build', 'conan')
        os.makedirs(dirname, exist_ok=True)
        print('>>>', os.getcwd(), '::', dirname, '::', os.path.isdir(dirname))
      shell: python

    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main
      with:
        version: 1.57.0

    - name: Configure Conan (library and build type)
      run: |
        conan profile new default --detect
        conan profile new ${{ matrix.build_profile }} --detect
        conan profile update ${{ matrix.conan_profile }} ${{ matrix.build_profile }}
        conan profile update settings.build_type=${{ matrix.build_type }} ${{ matrix.build_profile }}
        conan remote add mbits-conan https://mbits.jfrog.io/artifactory/api/conan/mbits-conan
        conan user -p ${{ secrets.JFROG_KEY }} -r mbits-conan ${{ secrets.JFROG_USER }}
        conan profile show ${{ matrix.build_profile }}

    - name: Conan cache
      uses: actions/cache@v3
      id: cache
      with:
        path: ${{ matrix.home }}/.conan/data
        key: ${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ hashFiles('conanfile.txt') }}
        restore-keys: |
          ${{ matrix.os }}-${{ matrix.build_type }}
          ${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.latest_conan_hash }}
          ${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ matrix.latest_conan_hash }}

    - name: Configure Conan
      working-directory: ${{github.workspace}}/build/conan
      run: conan install ../.. --build missing -pr:b ${{ matrix.build_profile }} -pr:h ${{ matrix.build_profile }}

    - name: Configure CMake
      run: cmake --preset ${{ matrix.build_profile }}-${{ matrix.build_generator }} -DCOV_CUTDOWN_OS=ON -DCOV_SANITIZE:BOOL=${{ matrix.cov_sanitize }}

    - name: Build
      run: cmake --build --preset ${{ matrix.build_profile }} --parallel

    - name: Pack
      if: ${{ matrix.cpack_generator != '' }}
      working-directory: ${{github.workspace}}/build/${{ matrix.build_profile }}
      run: cpack -G ${{ matrix.cpack_generator }}

    - name: Upload packages
      uses: actions/upload-artifact@v3
      if: ${{ matrix.cpack_generator != '' }}
      with:
        name: Packages
        path: ${{github.workspace}}/build/${{ matrix.build_profile }}/packages/cov-*

    - name: Test
      working-directory: ${{github.workspace}}/build/${{ matrix.build_profile }}
      run: |
        ctest -C ${{env.BUILD_TYPE}} --output-on-failure

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: Test results
        path: ${{github.workspace}}/build/${{ matrix.build_profile }}/test-results/
