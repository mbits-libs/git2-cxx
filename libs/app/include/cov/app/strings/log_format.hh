// THIS FILE IS AUTOGENERATED
// @generated
#pragma once

#include <lngs/lngs.hpp>

// clang-format off
namespace cov::app::str::log_format {
    enum class lng {
        /// in the future (Relative time, timestamp in future compared with 'now'.)
        IN_THE_FUTURE = 1001,
        /// fail (Result of location coverage below the "incomplete" mark)
        MARK_FAILING = 1010,
        /// incomplete (Result of location coverage above the "incomplete" and below the "pass" mark)
        MARK_INCOMPLETE = 1011,
        /// pass (Result of location coverage above the "pass" mark)
        MARK_PASSING = 1012,
    }; // enum class lng

    enum class counted {
        /// one second ago | {} seconds ago (Relative time, no more than few seconds ago)
        SECONDS_AGO = 1002,
        /// one minute ago | {} minutes ago (Relative time, no more than few minutes ago)
        MINUTES_AGO = 1003,
        /// one hour ago | {} hours ago (Relative time, no more than few hours ago)
        HOURS_AGO = 1004,
        /// one day ago | {} days ago (Relative time, no more than few days ago)
        DAYS_AGO = 1005,
        /// one week ago | {} weeks ago (Relative time, no more than few weeks ago)
        WEEKS_AGO = 1006,
        /// one month ago | {} months ago (Relative time, no more than few months ago)
        MONTHS_AGO = 1007,
        /// one year, | {} years, (Relative time, no more than few 5 years, no less than a years ago; concatented with log_format.MONTHS_AGO to create 'X years, Y months ago')
        YEARS_MONTHS_AGO = 1008,
        /// one year ago | {} years ago (Relative time, longer than 5 years, or longer than 12 months, by whole years)
        YEARS_AGO = 1009,
    }; // enum class counted

    struct Resource {
        static const char* data();
        static std::size_t size();
    };

    using Strings = lngs::StringsWithPlurals<lng, counted, lngs::VersionedFile<1,
        lngs::storage::FileWithBuiltin<Resource>>>;
} // namespace cov::app::str::log_format
// clang-format on
