// THIS FILE IS AUTOGENERATED
// @generated
#pragma once

#include <lngs/lngs.hpp>

// clang-format off
namespace cov::app::str::cov_report {
    enum class lng {
        /// <report-file> (Name of report file argument (be it Cobertura XML or Coveralls JSON))
        REPORT_FILE_META = 1001,
        /// <filter> (Name of filter argument)
        FILTER_META = 1002,
        /// selects report to import (Description for the report file argument)
        REPORT_FILE_DESCRIPTION = 1003,
        /// filters other report formats to internal cov format; known filters are: {} (Description for the report file argument; the list at the end uses REPORT_FILE_DESCRIPTION_LIST_END)
        FILTER_DESCRIPTION = 1004,
        /// {} and {} (Final part of the report file argument description; together the list will be "known filters are: 'first', 'second', 'third' and 'fourth'")
        FILTER_DESCRIPTION_LIST_END = 1005,
        /// replaces the tip of the current branch by creating a new commit (Description for the --amend argument)
        AMEND_DESCRIPTION = 1006,
        /// filter {} exited with return code {} (Error message for non-0 result code from a filter)
        ERROR_FILTER_FAILED = 1007,
        /// filter {} could not be found (Error message for a missing filter file)
        ERROR_FILTER_NOENT = 1008,
        /// filter {} could not be used (Error message for unusable filter file)
        ERROR_FILTER_ACCESS = 1009,
        /// there were issues with {} (Error message for issues with cov JSON)
        ERROR_REPORT_ISSUES = 1010,
        /// there were issues with {} processed by {} filter (Error message for issues with cov JSON, which was produced by a filter)
        ERROR_FILTERED_REPORT_ISSUES = 1011,
        /// cannot find the Git commit from report (Error message for failing to find the reported commit in the git repository)
        ERROR_CANNOT_LOAD_COMMIT = 1012,
        /// cannot find {} (Error message for failing to open a file)
        ERROR_CANNOT_FIND_FILE = 1013,
        /// cannot write to repository database (Error message for failing to write repository objects)
        ERROR_CANNOT_WRITE_TO_DB = 1014,
        /// cannot read current report back (Error message for failing to read repository objects)
        ERROR_CANNOT_READ_FROM_DB = 1015,
        /// this operation must be run in a work tree (Error message for calling the app in bare repository)
        ERROR_BARE_GIT = 1016,
        /// could not read {} (Error message for trying to read from a missing file)
        ERROR_CANNOT_OPEN_FILE = 1017,
        /// you have nothing to amend (Error message for calling --amend before any reports)
        ERROR_AMEND_IN_FRESH_REPO = 1018,
        /// {} was modified after the report (Warning message for adding a modified file)
        WARNING_FILE_MODIFIED = 1019,
        /// detached HEAD (Name of a branch, when there is no branch)
        MESSAGE_DETACHED_HEAD = 1020,
        /// based on (Description for commit in current report; will become "based on 13a39fbf9@main")
        MESSAGE_FIELD_GIT_COMMIT = 1022,
        /// parent (Description for parent of current report; will become "parent d4965abfb")
        MESSAGE_FIELD_PARENT_REPORT = 1023,
    }; // enum class lng

    enum class counted {
        /// {} file | {} files (Number of files in current report)
        MESSAGE_FILE_COUNT = 1021,
    }; // enum class counted

    struct Resource {
        static const char* data();
        static std::size_t size();
    };

    using Strings = lngs::StringsWithPlurals<lng, counted, lngs::VersionedFile<1,
        lngs::storage::FileWithBuiltin<Resource>>>;
} // namespace cov::app::str::cov_report
// clang-format on
