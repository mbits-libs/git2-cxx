// THIS FILE IS AUTOGENERATED
// @generated
#pragma once

#include <lngs/lngs.hpp>

// clang-format off
namespace cov::app::str::cov_module {
    enum class lng {
        /// no arguments ("Argument" name for no arguments)
        NOARGS_META = 1001,
        /// <git-commit> (Name of a Git commit argument)
        COMMIT_META = 1002,
        /// prints module list from git work directory and exits (Description for the no-command call, even without the commit)
        SHOW_WORKDIR_DESCRIPTION = 1003,
        /// prints module list for given commit and exits (Description for the no-command call with commit given as an argument)
        SHOW_COMMIT_DESCRIPTION = 1004,
        /// prints module name separator from either workdir or commit (Description for the --show-sep argument)
        SHOW_SEP_DESCRIPTION = 1005,
        /// sets new module name separator (Description for the --set-sep argument)
        SET_SEP_DESCRIPTION = 1006,
        /// adds a directory filter to a new or existing module (Description for the --add argument)
        ADD_DESCRIPTION = 1007,
        /// removes a directory filter from given module (Description for the --remove argument)
        REMOVE_DESCRIPTION = 1008,
        /// removes all filters from the module, effectively removing it (Description for the --remove-all argument)
        REMOVA_ALL_DESCRIPTION = 1009,
        /// {} argument cannot be used with other options (Error message for conflicting arguments; used by arguments which cannot be part of series of options)
        ERROR_EXCLUSIVE = 1010,
        /// cannot find Git repository in {} (Error message for failing to locate Git repository in place of call)
        ERROR_NO_GIT_REPO = 1014,
        /// this operation must be run in a work tree (Error message for calling inside a bare Git repository)
        ERROR_NO_GIT_WORKDIR = 1015,
        /// <git-commit> argument should describe a single object (Error message for calling with a commit range (first..last))
        ERROR_REVPARSE_NEEDS_SINGLE = 1016,
        /// <git-commit> argument should describe a commit (Error message for calling with reference to some other type of Git object,than commit (e.g. commited file or directory))
        ERROR_REVPARSE_NEEDS_COMMIT = 1017,
        /// module {} already contains directory {} (Error message for trying to add a duplicate directory)
        ERROR_ADD_DUPLICATE = 1018,
        /// there is no {} module (Error message for trying to remove a directory from non-existent module)
        ERROR_REMOVE_NO_MODULE = 1019,
    }; // enum class lng

    enum class counted {
        /// {} argument needs exactly {} argument | {} argument needs exactly {} arguments (Error message for a missing/redundant argument, this exact number is needed; first parameter becames name of the argument, second is the expected count)
        ERROR_OPTS_NEEDS_EXACTLY = 1011,
        /// {} argument needs at least {} argument | {} argument needs at least {} arguments (Error message for a missing/redundant argument, provided amount is lower than minimal expected; first parameter becames name of the argument, second is the expected count)
        ERROR_OPTS_NEEDS_AT_LEAST = 1012,
        /// {} argument needs at most {} argument | {} argument needs at most {} arguments (Error message for a missing/redundant argument, provided amount is larger than maximal expected; first parameter becames name of the argument, second is the expected count)
        ERROR_OPTS_NEEDS_AT_MOST = 1013,
    }; // enum class counted

    struct Resource {
        static const char* data();
        static std::size_t size();
    };

    using Strings = lngs::StringsWithPlurals<lng, counted, lngs::VersionedFile<1,
        lngs::storage::FileWithBuiltin<Resource>>>;
} // namespace cov::app::str::cov_module
// clang-format on
