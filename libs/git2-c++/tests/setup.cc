// Copyright (c) 2022 midnightBITS
// This code is licensed under MIT license (see LICENSE for details)

#include "setup.hh"
#include <cstdio>
#include <filesystem>
#include <fstream>
#include <git2/global.hh>

namespace git::testing::setup {
	using namespace ::std::literals;

	namespace {
		class test_globals {
		public:
			static test_globals& get() noexcept {
				static test_globals self{};
				return self;
			}

			void enter() {
				if (!counter++) setup_test_env();
			}

			void leave() {
				if (!--counter) teardown_test_env();
			}

		private:
			static void setup_test_env();
			static void teardown_test_env();

			init thread{};
			int counter{};
		};
		std::filesystem::path get_test_dir() {
			static constexpr auto repos = "repos"sv;
			std::error_code ec{};
			auto const temp = std::filesystem::temp_directory_path(ec);
			if (ec) {
				printf("Running tests from %.*s\n",
				       static_cast<int>(repos.length()), repos.data());
				return repos;
			}
			printf("Running tests from %s\n", get_path(temp / repos).c_str());
			return temp / repos;
		}
	};  // namespace

	test_initializer::test_initializer() { test_globals::get().enter(); }
	test_initializer::~test_initializer() { test_globals::get().leave(); }

	std::filesystem::path test_dir() {
		static std::filesystem::path dirname = get_test_dir();
		return dirname;
	}

#ifdef __cpp_lib_char8_t
	template <typename CharTo, typename Source>
	std::basic_string_view<CharTo> conv(Source const& view) {
		return {reinterpret_cast<CharTo const*>(view.data()), view.length()};
	}

	std::string get_path(path const& p) {
		auto const s8 = p.generic_u8string();
		auto const view = conv<char>(s8);
		return {view.data(), view.length()};
	}

	path make_path(std::string_view utf8) { return conv<char8_t>(utf8); }

#else
	std::string get_path(path const& p) { return p.generic_u8string(); }

	path make_path(std::string_view utf8) {
		return std::filesystem::u8path(utf8);
	}
#endif

	git::repository open_repo() {
		return git::repository::open(test_dir() / make_path("bare.git/"sv));
	}

	namespace {
		namespace file {
			static constexpr auto text_1 = "ref: refs/heads/main\n"sv;
			static constexpr auto text_2 =
			    "[core]\n"
			    "       repositoryformatversion = 0\n"
			    "       filemode = false\n"
			    "       bare = true\n"
			    "       ignorecase = true\n"sv;
			static constexpr auto text_3 =
			    "ed631389fc343f7788bf414c2b3e77749a15deb6"sv;
			static constexpr auto text_4 =
			    "[submodule \"bare\"]\n"
			    "       path = bare\n"
			    "       url = ../bare.git\n"sv;
			static constexpr auto text_5 =
			    "first line\r\n"
			    "second line\r\n"sv;
			static constexpr auto text_6 =
			    "[core]\n"
			    "       repositoryformatversion = 0\n"
			    "       filemode = false\n"
			    "       bare = false\n"
			    "       logallrefupdates = true\n"
			    "       ignorecase = true\n"
			    "[submodule \"bare\"]\n"
			    "       url = /tmp/repos/bare.git\n"
			    "       active = true\n"sv;
			static constexpr auto text_7 =
			    "71e6ee11cf9c7dd8f2f71415c3ee4a3a411d9c85\n"sv;
			static constexpr auto text_8 =
			    "# pack-refs with: peeled fully-peeled sorted \n"
			    "ed631389fc343f7788bf414c2b3e77749a15deb6 refs/remotes/origin/main\n"sv;
			static constexpr auto text_9 =
			    "[core]\n"
			    "       repositoryformatversion = 0\n"
			    "       filemode = true\n"
			    "       bare = false\n"
			    "       logallrefupdates = true\n"
			    "       worktree = ../../../bare\n"
			    "[remote \"origin\"]\n"
			    "       url = /tmp/repos/bare.git\n"
			    "       fetch = +refs/heads/*:refs/remotes/origin/*\n"
			    "[branch \"main\"]\n"
			    "       remote = origin\n"
			    "       merge = refs/heads/main\n"sv;
			static constexpr auto text_10 = "ref: refs/remotes/origin/main\n"sv;
			static constexpr auto text_11 =
			    "ed631389fc343f7788bf414c2b3e77749a15deb6\n"sv;
			static constexpr auto text_12 = "# Testing repos\n"sv;
			static constexpr auto text_13 = "gitdir: ../.git/modules/bare\n"sv;

			static constexpr unsigned char binary_1[] = {
			    0x78, 0x01, 0x2b, 0x29, 0x4a, 0x4d, 0x55, 0x30, 0x36,
			    0x67, 0x30, 0x34, 0x30, 0x30, 0x33, 0x31, 0x51, 0x08,
			    0x72, 0x75, 0x74, 0xf1, 0x75, 0xd5, 0xcb, 0x4d, 0x61,
			    0xb8, 0x11, 0x93, 0xa5, 0xbc, 0x9c, 0x61, 0x95, 0xc2,
			    0xdf, 0xe5, 0xe7, 0xd7, 0xf5, 0xad, 0x9a, 0xd7, 0xf0,
			    0x4a, 0xe9, 0xee, 0x03, 0x00, 0x3e, 0xdc, 0x11, 0xa9};

			static constexpr unsigned char binary_2[] = {
			    0x78, 0x01, 0x4b, 0xca, 0xc9, 0x4f, 0x52, 0x30,
			    0x34, 0x63, 0x50, 0x56, 0x08, 0x49, 0x2d, 0x2e,
			    0xc9, 0xcc, 0x4b, 0x57, 0x28, 0x4a, 0x2d, 0xc8,
			    0x2f, 0xe6, 0x02, 0x00, 0x5b, 0x5a, 0x07, 0x9b};

			static constexpr unsigned char binary_3[] = {
			    0x78, 0x01, 0x9d, 0x8d, 0x41, 0x0a, 0xc2, 0x30, 0x10, 0x00,
			    0x3d, 0xe7, 0x15, 0x7b, 0x17, 0x64, 0x93, 0x36, 0xcd, 0x06,
			    0x8a, 0x78, 0xf5, 0xe0, 0x07, 0xbc, 0x65, 0x9b, 0xd4, 0x2e,
			    0x98, 0x14, 0xea, 0xf6, 0xe2, 0xeb, 0xed, 0x1b, 0x3c, 0x0d,
			    0x0c, 0x0c, 0x33, 0xad, 0xb5, 0x8a, 0x82, 0x25, 0x3c, 0xe9,
			    0x56, 0x0a, 0x04, 0xcb, 0x1c, 0x22, 0xa6, 0xbe, 0x50, 0x61,
			    0x74, 0x4c, 0x6e, 0x8e, 0x3d, 0xe5, 0x99, 0x6d, 0x97, 0x63,
			    0x37, 0x44, 0x0e, 0x03, 0x65, 0xec, 0x83, 0x49, 0xbb, 0x2e,
			    0xeb, 0x06, 0x8f, 0xb4, 0x4d, 0xd2, 0xe0, 0x99, 0xf7, 0x06,
			    0x63, 0xfd, 0x1e, 0xb8, 0x55, 0xc9, 0x4d, 0x5e, 0x8b, 0xb2,
			    0xe8, 0xe7, 0x32, 0xad, 0xf5, 0x0a, 0x76, 0xf0, 0xde, 0x07,
			    0x6f, 0x89, 0xe0, 0x8c, 0x0e, 0xd1, 0x1c, 0xf6, 0xb8, 0x6a,
			    0xf9, 0xb7, 0x37, 0xf7, 0x26, 0x2a, 0xe9, 0x6d, 0x7e, 0x47,
			    0xfc, 0x3b, 0x35};

			static constexpr unsigned char binary_4[] = {
			    0x44, 0x49, 0x52, 0x43, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
			    0x00, 0x03, 0x62, 0xae, 0xcc, 0x53, 0x1d, 0x8a, 0x14, 0x5a,
			    0x62, 0xae, 0xcc, 0x53, 0x1d, 0x8a, 0x14, 0x5a, 0x00, 0x01,
			    0x03, 0x02, 0x02, 0x28, 0x01, 0xe8, 0x00, 0x00, 0x81, 0xa4,
			    0x00, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x03, 0xe8, 0x00, 0x00,
			    0x00, 0x33, 0xbc, 0xa9, 0xd5, 0xf2, 0xa5, 0x00, 0x92, 0xf1,
			    0xad, 0x2f, 0x52, 0xd0, 0x3b, 0xde, 0xd3, 0xbd, 0x9d, 0x2b,
			    0x5e, 0xdd, 0x00, 0x0b, 0x2e, 0x67, 0x69, 0x74, 0x6d, 0x6f,
			    0x64, 0x75, 0x6c, 0x65, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00,
			    0x00, 0x00, 0x62, 0xae, 0xcc, 0x53, 0x1d, 0x10, 0x01, 0x6d,
			    0x62, 0xae, 0xcc, 0x53, 0x1d, 0x10, 0x01, 0x6d, 0x00, 0x01,
			    0x03, 0x02, 0x02, 0x28, 0x20, 0x7d, 0x00, 0x00, 0xe0, 0x00,
			    0x00, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x03, 0xe8, 0x00, 0x00,
			    0x10, 0x00, 0xed, 0x63, 0x13, 0x89, 0xfc, 0x34, 0x3f, 0x77,
			    0x88, 0xbf, 0x41, 0x4c, 0x2b, 0x3e, 0x77, 0x74, 0x9a, 0x15,
			    0xde, 0xb6, 0x00, 0x04, 0x62, 0x61, 0x72, 0x65, 0x00, 0x00,
			    0x00, 0x00, 0x00, 0x00, 0x62, 0xae, 0xcb, 0xf3, 0x38, 0xcb,
			    0x84, 0x40, 0x62, 0xae, 0xcb, 0xf3, 0x38, 0xcb, 0x84, 0x40,
			    0x00, 0x01, 0x03, 0x02, 0x02, 0x28, 0x00, 0x20, 0x00, 0x00,
			    0x81, 0xa4, 0x00, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x03, 0xe8,
			    0x00, 0x00, 0x00, 0x19, 0x42, 0xd6, 0xab, 0x78, 0x98, 0x30,
			    0x1b, 0x32, 0xaa, 0xd7, 0x01, 0x91, 0xb3, 0x0e, 0xff, 0x94,
			    0xe7, 0x3a, 0x29, 0x34, 0x00, 0x0d, 0x73, 0x75, 0x62, 0x64,
			    0x69, 0x72, 0x2f, 0x61, 0x2d, 0x66, 0x69, 0x6c, 0x65, 0x00,
			    0x00, 0x00, 0x00, 0x00, 0x54, 0x52, 0x45, 0x45, 0x00, 0x00,
			    0x00, 0x38, 0x00, 0x33, 0x20, 0x31, 0x0a, 0x56, 0xe4, 0xe9,
			    0x82, 0x88, 0xfa, 0xc4, 0xca, 0x89, 0x84, 0x65, 0x02, 0xf0,
			    0xed, 0x1d, 0x38, 0xb3, 0x18, 0x2e, 0x40, 0x73, 0x75, 0x62,
			    0x64, 0x69, 0x72, 0x00, 0x31, 0x20, 0x30, 0x0a, 0x56, 0x18,
			    0xe1, 0x71, 0x82, 0xd4, 0x90, 0x46, 0x37, 0x31, 0xfa, 0x55,
			    0xd3, 0xc9, 0x35, 0x18, 0xae, 0x7b, 0xc2, 0x27, 0x01, 0xaf,
			    0x99, 0xee, 0xeb, 0x67, 0x3f, 0xa7, 0x15, 0x38, 0x0a, 0xa5,
			    0x6b, 0x60, 0xcc, 0xea, 0x0f, 0x62, 0x9a, 0xc2};

			static constexpr unsigned char binary_5[] = {
			    0x78, 0x01, 0x9d, 0x8d, 0xb1, 0x0a, 0xc2, 0x30, 0x14, 0x45,
			    0x9d, 0xf3, 0x15, 0x6f, 0x17, 0x4a, 0x9a, 0x36, 0x31, 0x05,
			    0x11, 0xdd, 0xed, 0x0f, 0xb8, 0xbd, 0x26, 0xaf, 0x6d, 0x84,
			    0xb4, 0x25, 0x79, 0x5d, 0xfc, 0x7a, 0x03, 0x2e, 0x0e, 0x4e,
			    0x4e, 0x17, 0x0e, 0xf7, 0xdc, 0xeb, 0xd6, 0x18, 0x03, 0x83,
			    0xd2, 0xf6, 0xc0, 0x89, 0x08, 0xb4, 0xa1, 0x96, 0x3a, 0xab,
			    0xac, 0x1d, 0xd1, 0xb5, 0x0e, 0x6d, 0x67, 0x5b, 0xa3, 0xa5,
			    0x1a, 0x25, 0xf9, 0xda, 0x37, 0x76, 0x68, 0x6a, 0xab, 0xa8,
			    0x95, 0x02, 0x77, 0x9e, 0xd7, 0x04, 0x3d, 0x26, 0x17, 0x16,
			    0x78, 0xf8, 0x7d, 0x81, 0x73, 0x7c, 0x95, 0xb8, 0xc6, 0xe0,
			    0x97, 0x30, 0xcd, 0x3c, 0x04, 0xce, 0x95, 0x5b, 0xe3, 0x05,
			    0x6a, 0xa3, 0xb5, 0x51, 0xea, 0x64, 0x34, 0x1c, 0xa5, 0x92,
			    0x52, 0x14, 0x5a, 0x5e, 0x99, 0xfe, 0xf5, 0xc5, 0x0d, 0xf2,
			    0x3e, 0x3c, 0xc9, 0xb1, 0x10, 0x3d, 0xe5, 0x8c, 0x13, 0xc1,
			    0x86, 0x09, 0xa7, 0x84, 0xdb, 0x0c, 0x75, 0xf5, 0x8b, 0xaa,
			    0x42, 0xef, 0x98, 0xf9, 0xab, 0xb8, 0x8e, 0xc0, 0x33, 0x41,
			    0xfc, 0x2c, 0x54, 0xe2, 0x0d, 0x1a, 0x06, 0x54, 0xe7};

			static constexpr unsigned char binary_6[] = {
			    0x78, 0x01, 0x4b, 0xca, 0xc9, 0x4f, 0x52, 0x30, 0x32,
			    0x65, 0x48, 0xcb, 0x2c, 0x2a, 0x2e, 0x51, 0xc8, 0xc9,
			    0xcc, 0x4b, 0xe5, 0xe5, 0x2a, 0x4e, 0x4d, 0xce, 0xcf,
			    0x4b, 0x81, 0x72, 0x00, 0xb6, 0xcc, 0x0a, 0x89};

			static constexpr unsigned char binary_7[] = {
			    0x78, 0x01, 0x2b, 0x29, 0x4a, 0x4d, 0x55, 0x30, 0x36,
			    0x61, 0x30, 0x34, 0x30, 0x30, 0x33, 0x31, 0x51, 0x48,
			    0xd4, 0x4d, 0xcb, 0xcc, 0x49, 0x65, 0x70, 0xba, 0xb6,
			    0xba, 0x62, 0x86, 0x81, 0xb4, 0xd1, 0xaa, 0xeb, 0x8c,
			    0x13, 0x37, 0xf3, 0xfd, 0x9f, 0xf2, 0xdc, 0x4a, 0xd3,
			    0x04, 0x00, 0x19, 0x2e, 0x0e, 0xea};

			static constexpr unsigned char binary_8[] = {
			    0x78, 0x01, 0x2b, 0x29, 0x4a, 0x4d, 0x55, 0x30, 0x34, 0x30,
			    0x61, 0x30, 0x34, 0x30, 0x30, 0x33, 0x31, 0x51, 0xd0, 0x4b,
			    0xcf, 0x2c, 0xc9, 0xcd, 0x4f, 0x29, 0xcd, 0x49, 0x2d, 0x66,
			    0xd8, 0xb3, 0xf2, 0xea, 0xa7, 0xa5, 0x0c, 0x93, 0x3e, 0xae,
			    0xd5, 0x0f, 0xba, 0x60, 0x7d, 0xef, 0xf2, 0xde, 0xb9, 0xda,
			    0x71, 0x77, 0x0d, 0xcd, 0x0c, 0x80, 0x40, 0x21, 0x29, 0xb1,
			    0x28, 0x95, 0xe1, 0x6d, 0xb2, 0x70, 0xe7, 0x1f, 0x13, 0xfb,
			    0xf2, 0x8e, 0xfd, 0x8e, 0x3e, 0xda, 0x76, 0xe5, 0x25, 0xb3,
			    0x44, 0xef, 0x6d, 0x33, 0x01, 0x4b, 0x17, 0x97, 0x26, 0xa5,
			    0x64, 0x16, 0x31, 0x84, 0x49, 0x3c, 0x2c, 0x6c, 0xba, 0x32,
			    0xc1, 0xcd, 0xdc, 0xf0, 0x57, 0xe8, 0xe5, 0x93, 0xa6, 0x12,
			    0xeb, 0xaa, 0x0f, 0xa9, 0x03, 0x00, 0xb1, 0x13, 0x2d, 0x77};

			static constexpr unsigned char binary_9[] = {
			    0x78, 0x01, 0x4b, 0xca, 0xc9, 0x4f, 0x52, 0x30, 0x35,
			    0x64, 0x88, 0x2e, 0x2e, 0x4d, 0xca, 0xcd, 0x4f, 0x29,
			    0xcd, 0x49, 0x55, 0x50, 0x4a, 0x4a, 0x2c, 0x4a, 0x55,
			    0x8a, 0xe5, 0xe2, 0x2c, 0x48, 0x2c, 0xc9, 0x50, 0xb0,
			    0x55, 0x00, 0x71, 0xb9, 0x38, 0x4b, 0x8b, 0x72, 0x80,
			    0x6c, 0x3d, 0x3d, 0x7d, 0x10, 0x57, 0x2f, 0x3d, 0xb3,
			    0x84, 0x0b, 0x00, 0x2c, 0xe6, 0x12, 0x07};

			static constexpr unsigned char binary_10[] = {
			    0x44, 0x49, 0x52, 0x43, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
			    0x00, 0x01, 0x62, 0xae, 0xcc, 0x53, 0x1d, 0x10, 0x01, 0x6d,
			    0x62, 0xae, 0xcc, 0x53, 0x1d, 0x10, 0x01, 0x6d, 0x00, 0x01,
			    0x03, 0x02, 0x02, 0x28, 0x01, 0xe6, 0x00, 0x00, 0x81, 0xa4,
			    0x00, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x03, 0xe8, 0x00, 0x00,
			    0x00, 0x10, 0xd8, 0x5c, 0x6a, 0x23, 0xa7, 0x00, 0xaa, 0x20,
			    0xfd, 0xa7, 0xcf, 0xae, 0x8e, 0xaa, 0x9e, 0x80, 0xea, 0x22,
			    0xdd, 0xe0, 0x00, 0x09, 0x52, 0x45, 0x41, 0x44, 0x4d, 0x45,
			    0x2e, 0x6d, 0x64, 0x00, 0x54, 0x52, 0x45, 0x45, 0x00, 0x00,
			    0x00, 0x19, 0x00, 0x31, 0x20, 0x30, 0x0a, 0x71, 0xbb, 0x79,
			    0x0a, 0x4e, 0x8e, 0xb0, 0x2b, 0x82, 0xf9, 0x48, 0xdf, 0xb1,
			    0x3d, 0x93, 0x69, 0xb7, 0x68, 0xd0, 0x47, 0xe4, 0xab, 0x34,
			    0x18, 0x49, 0x86, 0x8e, 0x37, 0x92, 0x5d, 0x22, 0x55, 0x89,
			    0x8c, 0xd6, 0x04, 0xb4, 0x90, 0x3c, 0x54};

			struct text {
				std::string_view path{};
				std::string_view content{};
			};

			struct binary {
				std::string_view path{};
				std::basic_string_view<unsigned char> content{};
			};
		}  // namespace file

		template <size_t Length>
		constexpr std::basic_string_view<unsigned char> span(
		    unsigned char const (&v)[Length]) noexcept {
			return {v, Length};
		}

		constexpr std::string_view subdirs[] = {
		    "bare.git/objects/pack"sv,
		    "bare.git/objects/info"sv,
		    "bare.git/refs/tags"sv,
		    "gitdir/.git/objects/pack"sv,
		    "gitdir/.git/objects/info"sv,
		    "gitdir/.git/refs/tags"sv,
		    "gitdir/.git/modules/bare/objects/pack"sv,
		    "gitdir/.git/modules/bare/objects/info"sv,
		    "gitdir/.git/modules/bare/refs/tags"sv,
		    "gitdir/.git/modules/bare/branches"sv,
		};

		constexpr file::text text[] = {
		    {"bare.git/HEAD"sv, file::text_1},
		    {"bare.git/config"sv, file::text_2},
		    {"bare.git/refs/heads/main"sv, file::text_3},
		    {"gitdir/.git/HEAD"sv, file::text_1},
		    {"gitdir/.git/config"sv, file::text_6},
		    {"gitdir/.git/modules/bare/HEAD"sv, file::text_1},
		    {"gitdir/.git/modules/bare/config"sv, file::text_9},
		    {"gitdir/.git/modules/bare/packed-refs"sv, file::text_8},
		    {"gitdir/.git/modules/bare/refs/heads/main"sv, file::text_11},
		    {"gitdir/.git/modules/bare/refs/remotes/origin/HEAD"sv,
		     file::text_10},
		    {"gitdir/.git/refs/heads/main"sv, file::text_7},
		    {"gitdir/.gitmodules"sv, file::text_4},
		    {"gitdir/bare/.git"sv, file::text_13},
		    {"gitdir/bare/README.md"sv, file::text_12},
		    {"gitdir/subdir/a-file"sv, file::text_5},
		};

		constexpr file::binary binary[] = {
		    {"bare.git/objects/71/bb790a4e8eb02b82f948dfb13d9369b768d047"sv,
		     span(file::binary_1)},
		    {"bare.git/objects/d8/5c6a23a700aa20fda7cfae8eaa9e80ea22dde0"sv,
		     span(file::binary_2)},
		    {"bare.git/objects/ed/631389fc343f7788bf414c2b3e77749a15deb6"sv,
		     span(file::binary_3)},
		    {"gitdir/.git/index"sv, span(file::binary_4)},
		    {"gitdir/.git/modules/bare/index"sv, span(file::binary_10)},
		    {"gitdir/.git/modules/bare/objects/71/bb790a4e8eb02b82f948dfb13d9369b768d047"sv,
		     span(file::binary_1)},
		    {"gitdir/.git/modules/bare/objects/d8/5c6a23a700aa20fda7cfae8eaa9e80ea22dde0"sv,
		     span(file::binary_2)},
		    {"gitdir/.git/modules/bare/objects/ed/631389fc343f7788bf414c2b3e77749a15deb6"sv,
		     span(file::binary_3)},
		    {"gitdir/.git/objects/42/d6ab7898301b32aad70191b30eff94e73a2934"sv,
		     span(file::binary_6)},
		    {"gitdir/.git/objects/56/18e17182d490463731fa55d3c93518ae7bc227"sv,
		     span(file::binary_7)},
		    {"gitdir/.git/objects/56/e4e98288fac4ca89846502f0ed1d38b3182e40"sv,
		     span(file::binary_8)},
		    {"gitdir/.git/objects/71/e6ee11cf9c7dd8f2f71415c3ee4a3a411d9c85"sv,
		     span(file::binary_5)},
		    {"gitdir/.git/objects/bc/a9d5f2a50092f1ad2f52d03bded3bd9d2b5edd"sv,
		     span(file::binary_9)},
		};
	}  // namespace

	void test_globals::setup_test_env() {
		printf("Setting up test environment\n");
		using namespace std::filesystem;

		std::error_code ignore{};
		remove_all(test_dir(), ignore);

		for (auto const subdir : setup::subdirs) {
			create_directories(test_dir() / make_path(subdir), ignore);
		}

		for (auto const [filename, contents] : setup::text) {
			auto const p = test_dir() / make_path(filename);
			create_directories(p.parent_path(), ignore);
			std::ofstream out{p};
			out.write(contents.data(), contents.size());
		}

		for (auto const nfo : setup::binary) {
			auto const p = test_dir() / make_path(nfo.path);
			create_directories(p.parent_path(), ignore);
			std::ofstream out{p, std::ios::binary};
			out.write(reinterpret_cast<char const*>(nfo.content.data()),
			          nfo.content.size());
		}
	}

	void test_globals::teardown_test_env() {
		printf("Tearing down test environment\n");
		using namespace std::filesystem;
		std::error_code ignore{};
		remove_all(test_dir(), ignore);
	}
}  // namespace git::testing::setup

void PrintTo(std::filesystem::path const& path, ::std::ostream* os) {
	*os << git::testing::setup::get_path(path);
}
